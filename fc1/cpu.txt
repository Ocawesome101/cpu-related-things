FC-1
====

The FC-1 is a general-purpose 24-bit processor supporting up to 16MB of memory.  There are 10 general-purpose, 24-bit registers.  There are 6 "attribute" registers for setting CPU attributes such as where the stack is.

The FC-1 is little-endian.

There is 1 24-bit memory bus.  There are 6 generic 16-bit IO busses.  Events are primarily interrupt-driven.  Memory-mapped IO is supported.

Instruction Format:

   EXTEND
    ----|
OPCODE  | DEST SRC  VALUE (if EXTEND)
1111111 1 1111 1111 111111111111111111111111

If EXTEND is 1, then VALUE is present.

INSTRUCTIONS
---------------
OPCODEs in the following table are MSB-first.

             EXTEND
              ----|
MNEMONIC  OPCODE  | DESCRIPTION
nop       0000000 0 Do nothing
--------- 0000000 1 Illegal instruction
== General-purpose ==
idload    0000001 0 Load DEST with the value at the memory address stored in SRC
load      0000001 1 Load DEST with the value at memory address VALUE
move      0000010 0 Copy SRC to DEST
imm       0000010 1 Load DEST with VALUE
idstore   0000011 0 Store the value in SRC at the memory address in DEST
store     0000011 1 Store the value in SRC at the memory address VALUE
push      0000100 0 Push SRC onto the stack
pushi     0000100 1 Push VALUE onto the stack
pop       0000101 0 Pop from the stack into DEST
== Flow control ==
compare   0000110 0 Compare SRC to DEST, and store the result in A5
jump      0000110 1 If A5 & SRC == SRC, jump to VALUE
idjump    0000111 0 If A5 & SRC == SRC, jump to the address stored in DEST
rjump     0000111 1 If A5 & SRC == SRC, jump to relative offset VALUE
== Integer operations ==
add       0001000 0 DEST += SRC
addi      0001000 1 DEST += VALUE
sub       0001001 0 DEST -= SRC
subi      0001001 1 DEST -= VALUE
mult      0001010 0 DEST *= SRC
multi     0001010 1 DEST *= VALUE
div       0001011 0 DEST /= SRC
divi      0001011 1 DEST /= VALUE
lshift    0001100 0 DEST <<= SRC
lshifti   0001100 1 DEST <<= VALUE
rshift    0001101 0 DEST >>= SRC
rshifti   0001101 1 DEST >>= VALUE
not       0001110 0 DEST not= DEST
--------- 0001110 1 illegal instruction
and       0001111 0 DEST &= SRC
andi      0001111 1 DEST &= VALUE
or        0010000 0 DEST |= SRC
ori       0010000 1 DEST |= VALUE
xor       0010001 0 DEST ~= SRC
xori      0010001 1 DEST ~= VALUE
== Port I/O ==
devid     0010010 0 Request the device ID of the device attached to the port stored in the SRC register
pread     0010010 1 Read into DEST, with extra parameters in VALUE (below)
pisready  0010011 0 Check if the device whose port is stored in SRC has any data ready; return value in DEST
pwrite    0010011 1 Write from SRC to port, extra parameters in VALUE:
    bit | meaning
   0..2 | select port (0-5)
      3 | if 0, read/write 1 byte; if 1, read/write 2 bytes
      4 | write:
            if 0, really do write from SRC; otherwise write from final 16 bits
            of VALUE
          read:
            if 0, really do read to DEST; otherwise read and discard
      5 | unused
      6 | unused
      7 | unused
  8..23 | data
== Interrupts ==
seti      1111101 0 Enable interrupts
irq       1111101 1 Send interrupt VALUE
clri      1111110 0 Disable interrupts
halt      1111111 0 Wait for an interrupt

ATTRIBUTE REGISTERS
-----------------------
These may be written to like the other registers, but care should be taken or things may break.
A0 | Program counter
A1 | Stack root pointer
A2 | Current stack index pointer
A3 | Pointer to the in-memory segment descriptor table (see below)
A4 | Pointer to the interrupt vector table
A5 | Result of the 'compare' instruction (flag register)
    bitmap:
        0 | carry
        1 | greater
        2 | less
        3 | equal
    4..23 | unused, always 0

SEGMENT DESCRIPTOR TABLE
---------------------------
The Segment Descriptor Table provides descriptions of memory segments.  Its layout in memory is:

1 byte: length in entries
<entries>
  For each entry:
  1 byte: flags
    0 | protected (fire NSJMP on entry)
    1 | can jump (otherwise fire SEGFAULT)
    2 | can set register A3
  3 bytes: start address
  3 bytes: end address

INTERRUPTS
----------------------------
IRQ  MEANING
00   TIMER - Internal timer       - no parameters
01   IODVC - I/O device interrupt - two parameters (DEVID, REQID)
03   NSJMP - Jump to new segment  - one parameter (SEGMENTID, index into SDT)
04 DBLFAULT  Double fault (unhandled interrupt)
05 TRPFAULT  Triple fault (uncaught double fault, hard resets)
06 STKOVERF  Stack overflow (stack exceeded segment boundaries)
07 SDTFAULT  Segment descriptor violation (attempt to jump to a protected or 
              NOJUMP segment, or write to A3 if it is disallowed)
08 ILGLINST  Illegal instruction
9-15       - reserved for future ISA revisions
16  SFIRQ  - Software interrupt   - no parameters

When fired, an interrupt results in the following actions:

  - All registers 0 through 9 are pushed onto the stack, with the program
    counter skipped and instead pushed *last*.
  - The interrupt's arguments are pushed onto the stack in reverse order,
    followed by the number of arguments.
  - The processor jumps to the interrupt vector's location.

The Interrupt Descriptor Table is a set of 16 4-byte interrupt vector pointers.

I/O
-----
Here are some standard memory-mapped I/O devices:
  - an 80x25 text screen from 0x200; in exactly the same format as the VGA framebuffer

Here are some standard port devices:
  - A keyboard (device ID 1)
  - A serial console (device ID 2)
  - A storage device (device ID 5)

All port devices must return a device ID when they are requested to do so.
