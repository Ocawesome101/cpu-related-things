// this is more-or-less BNF, but not really

<program> ::= <entrypoint> <top-level-block>

<entrypoint> ::= entrypoint <ident> ';'

<top-level-block> ::= ( <declaration> | <function> )*

<declaration> ::= var <ident> ':' <type> [ '=' <expression> ] ';'


<expression> ::= <term> [ <addop> <term> ]*

<term> ::= <bitexp> [ <mulop> <bitexp> ]*

<bitexp> ::= <boolexp> [ <bitop> <boolexp> ]*

<boolexp> ::= <factor> [ <boolop> <factor> ]*

<factor> ::= <number> | <func-call> | <ident> | '(' <expression> ')'


<func-call> ::= <ident> '(' <f-arg-list> ')'

<type> ::= [ '@' ] ( int | void )

<function> ::= fn <ident> '(' <f-param-list> ')' ':' <type> <block>

<f-param-list> ::= <ident> ':' <type> ( ',' <ident> ':' <type> )*

<block> ::= '{' ( <declaration> | <assignment> | <statement> )* '}'

<assignment> ::= <ident> '=' <expression> ';'

<statement> ::= <return-statement> | <break-statement> |
                <while-statement>  | <fcall-statement> |
                <asm-statement>    | <for-statement>   |
                <if-statement>

<return-statement> ::= return [ <expression> ] ';'

<break-statement> ::= break ';'

<while-statement> ::= while <expression> <block> ';'

<fcall-statement> ::= <func-call> ';'

<for-statement> ::= for '('
  ( <declaration> | <assignment> )
  <expression> ';'
  <assignment> ')' <block> ';'

<asm-statement> ::= asm <asm-block> ';'

<asm-block> ::= '{' ( <asm-line> )* '}'

<if-statement> ::= if <expression> <block> [ else <block> ] ';'
