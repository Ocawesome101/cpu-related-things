; this is an example of FC-1 assembly
; this particular program only sort of works due to an emulator bug

; this program expects to be run as BIOS, which is loaded to 0x4000
*offset 0x4000

; set up an interrupt vector table
imm a4, .ivt
seti

; print "hello, world" on repeat
.hello_loop
  imm r0, .text_hello
  pushi .hello_loop
  jump a5, .print

; print text pointed to by r0
.print
  imm r2, 0
  imm r3, 4
  .printloop
    idload r0, r1
    ; assume the serial port is port 0
    ; data, port, 1 or 2 bytes, write from SRC or from immediate
    pwrite r1, 0, 0, 0
    compare r1, r2
    addi r0, 1
    jump r3, .printloop
  pop r5
  idjump a5, r5

.isr_ret
  seti
  pop r0
  idjump a5, r0

.timer
  clri
  imm r0, .text_timer
  pushi .isr_ret
  jump a5, .print

.iodvc
  imm r0, .text_iodvc
  pushi .isr_ret
  jump a5, .print

.nsjmp
  imm r0, .text_nsjmp
  pushi .isr_ret
  jump a5, .print

.doublefault
  imm r0, .text_doublefault
  pushi .isr_ret
  jump a5, .print

.generalfault
  imm r0, .text_generalfault
  pushi .isr_ret
  jump a5, .print

.stackoverflow
  imm r0, .text_stackoverflow
  pushi .isr_ret
  jump a5, .print

.segfault
  imm r0, .text_segfault
  pushi .isr_ret
  jump a5, .print

.illegal
  imm r0, .text_illegal
  pushi .isr_ret
  jump a5, .print

.ivt
*dw4 .timer
*dw4 .iodvc
*dw4 .nsjmp
*dw4 .generalfault
*dw4 .doublefault
*dw4 0
*dw4 .stackoverflow
*dw4 .segfault
*dw4 .illegal

.text_hello
*dw "Hello, world!" 10 0
.text_timer
*dw "Got timer" 10 0
.text_iodvc
*dw "I/O device interrupt" 10 0
.text_nsjmp
*dw "Jump to protected segment" 10 0
.text_generalfault
*dw "!!Unhandled interrupt!!" 10 0
.text_doublefault
*dw "!!DOUBLE FAULT!!" 10 0
.text_stackoverflow
*dw "!!STACK OVERFLOW!!" 10 0
.text_segfault
*dw "Segmentation fault" 10 0
.text_illegal
*dw "Illegal instruction" 10 0
